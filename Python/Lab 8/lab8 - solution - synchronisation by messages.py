#!/usr/bin/env python    from __future__ import print_functionimport selectimport socketfrom string import ascii_lowercase, ascii_uppercase, digitsimport threadingimport timeACQ_REQ = "ACQ".encode(encoding="utf-8")REL_REQ = "REL".encode(encoding="utf-8")ACK_REP = "ACK".encode(encoding="utf-8")MySEM_HOST = "localhost"MySEM_PORT = 2220class MySem:    MySem_isInitialized = False    server_sock = 0    mySocket = 0    def __init__(self):        if MySem.MySem_isInitialized == False:                        MySem.MySem_isInitialized = True            t = threading.Thread(target=self.setupServer)            t.start()            print("MySem -> sem-thread started")        time.sleep(1)        self.mySocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        try:            self.mySocket.connect((MySEM_HOST, MySEM_PORT))        except socket.error as msg:            print("failed: " + str(msg))                def acquire(self):        self.mySocket.send(ACQ_REQ)        msg = self.mySocket.recv(64)        if msg != ACK_REP:            print("MySem::acquire() -> unexpected response (%s != %s)" % msg % ACK_REP)            def release(self):        self.mySocket.send(REL_REQ)                        def setupServer(self):        MySem.server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        try:            MySem.server_sock.bind((MySEM_HOST, MySEM_PORT))            MySem.server_sock.listen(5)            print("socket listening")        except socket.error as msg:            print("failed: " + str(msg))        self.runServer()    def runServer(self):        acquireList = []        sockets = []        try:            sockets.append(MySem.server_sock)            while True:                ready_to_read, ready_to_write, ready_to_except = select.select(sockets, [], [])                for rs in ready_to_read:                    if rs == MySem.server_sock:                        conn, address = MySem.server_sock.accept()                        print("accepted socket on:", address)                        sockets.append(conn)                    else:                        msg = rs.recv(64);                        if msg == ACQ_REQ:                            if not acquireList:                                rs.send(ACK_REP)                            acquireList.append(rs)                        elif msg == REL_REQ:                            acquireList.pop(0)                            if acquireList:                                acquireList[0].send(ACK_REP)        except socket.error as msg:            print("failed: " + str(msg))       def printDigits():    ms = MySem()    while True:        ms.acquire()        for i in digits:            print(i, end = '')        ms.release()        time.sleep(2)def printCharLower():    ms = MySem()    while True:        ms.acquire()        for i in ascii_lowercase:            print(i, end='')        ms.release()        time.sleep(2)def printCharUpper():    ms = MySem()    while True:        ms.acquire()        for i in ascii_uppercase:            print(i, end = '')        ms.release()        time.sleep(2)t1 = threading.Thread(target=printDigits)t2 = threading.Thread(target=printCharLower)t3 = threading.Thread(target=printCharUpper)t1.start()t2.start()t3.start()t1.join()t2.join()t3.join()